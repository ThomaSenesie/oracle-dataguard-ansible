---
# Tasks file for /home/oracle/ansible/roles/oracle_dataguard

- name: Create standby directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: oracle
    group: oinstall
    mode: '0775'
  become: yes
  loop:
    - /u02/oradata/PROD_SBY #control file location on standby pfile
    - /u02/oradata/PROD_SBY/arch #local archive location
    - /u02/backup/dataguard #bkp location and i assume it has been created in the oracle_install role but just double creating
    - /u01/app/oracle/admin/PROD_SBY/adump #audit file dest needed to be recretaed for startup nomount
    - /u01/app/oracle/admin/PROD_SBY/cdump # used for core dump files in Oracle. These files are generated when a critical error or crash
  when: inventory_hostname in groups['standby']

- name: Configure bash profile
  ansible.builtin.copy:
    content: |
      export ORACLE_BASE={{ oracle_base }}
      export ORACLE_HOME={{ oracle_home }}
      export PATH=$ORACLE_HOME/bin:$PATH
      export ORACLE_SID={{ db_sid }}
      export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/usr/lib
      export NLS_LANG=AMERICAN_AMERICA.UTF8
      export NLS_DATE_FORMAT='DD-MM-YYYY:HH24:MI:SS'
    dest: /home/oracle/.bash_profile
    owner: oracle
    group: oinstall
    mode: '0644'

- name: Source bash profile
  ansible.builtin.shell: |
    source /home/oracle/.bash_profile
    echo "ORACLE_HOME=$ORACLE_HOME" >> /tmp/env_check.log
    echo "ORACLE_SID=$ORACLE_SID" >> /tmp/env_check.log
  become: yes
  become_user: oracle
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ db_sid }}"

- name: Copy listener.ora
  ansible.builtin.template:
    src: listener.ora.j2
    dest: "{{ oracle_home }}/network/admin/listener.ora"
    owner: oracle
    group: oinstall
    mode: '0644'
  notify: restart_listener

- name: Copy tnsnames.ora
  ansible.builtin.template:
    src: tnsnames.ora.j2
    dest: "{{ oracle_home }}/network/admin/tnsnames.ora"
    owner: oracle
    group: oinstall
    mode: '0644'

- name: Copy password file from primary to standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    scp {{ oracle_home }}/dbs/orapwPROD oracle@{{ hostvars[groups['standby'][0]].ansible_host }}:{{ oracle_home }}/dbs/orapwPROD
  delegate_to: "{{ groups['primary'][0] }}"
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['primary']

- name: Create PFILE on primary
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    CREATE PFILE='/tmp/primary_pfile.ora' FROM SPFILE;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['primary']

- name: Copy PFILE to standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    scp /tmp/primary_pfile.ora oracle@{{ hostvars[groups['standby'][0]].ansible_host }}:/tmp/standby_pfile.ora
  delegate_to: "{{ groups['primary'][0] }}"
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['primary']

- name: Modify standby PFILE
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    # Remove any existing control_files entries to avoid duplicates
    sed -i '/CONTROL_FILES=/d' /tmp/standby_pfile.ora
    # Set standby-specific parameters
    sed -i 's/DB_UNIQUE_NAME=PROD/DB_UNIQUE_NAME=PROD_SBY/' /tmp/standby_pfile.ora
    sed -i 's/AUDIT_FILE_DEST=.*/AUDIT_FILE_DEST=''\\/u01\\/app\\/oracle\\/admin\\/PROD_SBY\\/adump''/' /tmp/standby_pfile.ora
    echo "*.db_name='PROD'" >> /tmp/standby_pfile.ora
    echo "*.control_files='/u02/oradata/PROD_SBY/control01.ctl','/u02/oradata/PROD_SBY/control02.ctl'" >> /tmp/standby_pfile.ora
    echo "*.db_unique_name='PROD_SBY'" >> /tmp/standby_pfile.ora
    echo "*.log_archive_config='DG_CONFIG=(PROD,PROD_SBY)'" >> /tmp/standby_pfile.ora
    echo "*.log_archive_dest_1='LOCATION=/u02/oradata/PROD_SBY/arch VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=PROD_SBY'" >> /tmp/standby_pfile.ora
    echo "*.log_archive_dest_2='SERVICE=PROD ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=PROD'" >> /tmp/standby_pfile.ora
    echo "*.log_archive_dest_state_1='ENABLE'" >> /tmp/standby_pfile.ora
    echo "*.log_archive_dest_state_2='ENABLE'" >> /tmp/standby_pfile.ora
    echo "*.log_archive_format='%t_%s_%r.arc'" >> /tmp/standby_pfile.ora
    echo "*.log_archive_max_processes=30" >> /tmp/standby_pfile.ora
    echo "*.fal_server='PROD'" >> /tmp/standby_pfile.ora
    echo "*.fal_client='PROD_SBY'" >> /tmp/standby_pfile.ora
    echo "*.db_file_name_convert='/u02/oradata/PROD/','/u02/oradata/PROD_SBY/'" >> /tmp/standby_pfile.ora
    echo "*.log_file_name_convert='/u02/oradata/PROD/','/u02/oradata/PROD_SBY/'" >> /tmp/standby_pfile.ora
    echo "*.standby_file_management='AUTO'" >> /tmp/standby_pfile.ora
    echo "*.db_flashback_retention_target=1440" >> /tmp/standby_pfile.ora
    echo "*.remote_login_passwordfile='EXCLUSIVE'" >> /tmp/standby_pfile.ora
    mv /tmp/standby_pfile.ora {{ oracle_home }}/dbs/initPROD.ora
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Validate standby PFILE parameters
  ansible.builtin.shell: |
    grep -E "db_unique_name|control_files|audit_file_dest" {{ oracle_home }}/dbs/initPROD.ora
  register: pfile_check
  failed_when: "'PROD_SBY' not in pfile_check.stdout or '/u02/oradata/PROD_SBY/control01.ctl' not in pfile_check.stdout or '/u01/app/oracle/admin/PROD_SBY/adump' not in pfile_check.stdout"
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Create SPFILE on primary
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    CREATE SPFILE FROM PFILE='{{ oracle_home }}/dbs/initPROD.ora';
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['primary']

- name: Create SPFILE on standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    CREATE SPFILE FROM PFILE='{{ oracle_home }}/dbs/initPROD.ora';
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Configure primary for Data Guard
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    ALTER SYSTEM SET LOG_ARCHIVE_CONFIG='DG_CONFIG=(PROD,PROD_SBY)' SCOPE=BOTH;
    ALTER SYSTEM SET LOG_ARCHIVE_DEST_1='LOCATION=/u02/oradata/PROD/arch VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=PROD' SCOPE=BOTH;
    ALTER SYSTEM SET LOG_ARCHIVE_DEST_2='SERVICE=PROD_SBY ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=PROD_SBY' SCOPE=BOTH;
    ALTER SYSTEM SET LOG_ARCHIVE_DEST_STATE_1='ENABLE' SCOPE=BOTH;
    ALTER SYSTEM SET LOG_ARCHIVE_DEST_STATE_2='ENABLE' SCOPE=BOTH;
    ALTER SYSTEM SET LOG_ARCHIVE_FORMAT='%t_%s_%r.arc' SCOPE=SPFILE;
    ALTER SYSTEM SET LOG_ARCHIVE_MAX_PROCESSES=30 SCOPE=BOTH;
    ALTER SYSTEM SET FAL_SERVER='PROD_SBY' SCOPE=BOTH;
    ALTER SYSTEM SET FAL_CLIENT='PROD' SCOPE=BOTH;
    ALTER SYSTEM SET DB_FILE_NAME_CONVERT='/u02/oradata/PROD_SBY/','/u02/oradata/PROD/' SCOPE=SPFILE;
    ALTER SYSTEM SET LOG_FILE_NAME_CONVERT='/u02/oradata/PROD_SBY/','/u02/oradata/PROD/' SCOPE=SPFILE;
    ALTER SYSTEM SET STANDBY_FILE_MANAGEMENT='AUTO' SCOPE=BOTH;
    ALTER SYSTEM SET DB_FLASHBACK_RETENTION_TARGET=1440 SCOPE=BOTH;
    ALTER DATABASE FORCE LOGGING;
    ALTER DATABASE FLASHBACK ON;
    ALTER DATABASE ADD STANDBY LOGFILE GROUP 11 '/u02/oradata/PROD/redo11.log' SIZE 200M;
    ALTER DATABASE ADD STANDBY LOGFILE GROUP 12 '/u02/oradata/PROD/redo12.log' SIZE 200M;
    ALTER DATABASE ADD STANDBY LOGFILE GROUP 13 '/u02/oradata/PROD/redo13.log' SIZE 200M;
    ALTER DATABASE ADD STANDBY LOGFILE GROUP 14 '/u02/oradata/PROD/redo14.log' SIZE 200M;
    ALTER SYSTEM SET REMOTE_LOGIN_PASSWORDFILE='EXCLUSIVE' SCOPE=SPFILE;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['primary']

- name: Start standby auxiliary instance
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    SHUTDOWN IMMEDIATE;
    STARTUP NOMOUNT;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Start listener on standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    lsnrctl start
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Duplicate database for standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    rman target sys/{{ sys_password }}@PROD auxiliary sys/{{ sys_password }}@PROD_SBY <<EOF
    RUN {
      ALLOCATE CHANNEL prmy1 TYPE DISK;
      ALLOCATE AUXILIARY CHANNEL stby1 TYPE DISK;
      DUPLICATE TARGET DATABASE FOR STANDBY FROM ACTIVE DATABASE
      NOFILENAMECHECK;
    }
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']


- name: Configure standby database parameters
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    ALTER SYSTEM SET LOG_ARCHIVE_DEST_1='LOCATION=/u02/oradata/PROD_SBY/arch VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=PROD_SBY' SCOPE=BOTH;
    ALTER SYSTEM SET LOG_ARCHIVE_DEST_2='SERVICE=PROD ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=PROD' SCOPE=BOTH; # deactivate for dgb
    ALTER SYSTEM SET LOG_ARCHIVE_DEST_STATE_1='ENABLE' SCOPE=BOTH;
    ALTER SYSTEM SET LOG_ARCHIVE_DEST_STATE_2='ENABLE' SCOPE=BOTH;
    ALTER SYSTEM SET LOG_ARCHIVE_FORMAT='%t_%s_%r.arc' SCOPE=SPFILE;
    ALTER SYSTEM SET LOG_ARCHIVE_MAX_PROCESSES=30 SCOPE=BOTH;
    ALTER SYSTEM SET FAL_SERVER='PROD' SCOPE=BOTH;
    ALTER SYSTEM SET FAL_CLIENT='PROD_SBY' SCOPE=BOTH;
    ALTER SYSTEM SET DB_FILE_NAME_CONVERT='/u02/oradata/PROD/','/u02/oradata/PROD_SBY/' SCOPE=SPFILE;
    ALTER SYSTEM SET LOG_FILE_NAME_CONVERT='/u02/oradata/PROD/','/u02/oradata/PROD_SBY/' SCOPE=SPFILE;
    ALTER SYSTEM SET STANDBY_FILE_MANAGEMENT='AUTO' SCOPE=BOTH;
    ALTER SYSTEM SET DB_FLASHBACK_RETENTION_TARGET=1440 SCOPE=BOTH;
    ALTER SYSTEM SET REMOTE_LOGIN_PASSWORDFILE='EXCLUSIVE' SCOPE=SPFILE;
    BEGIN
      EXECUTE IMMEDIATE 'ALTER DATABASE FLASHBACK ON';
    EXCEPTION
      WHEN OTHERS THEN
        IF SQLCODE = -38706 THEN NULL; -- Ignore ORA-38706 (recovery needed)
        ELSE RAISE;
      END IF;
    END;
    /
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Add standby redo logs on standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    BEGIN
      FOR i IN 11..14 LOOP
        EXECUTE IMMEDIATE 'ALTER DATABASE ADD STANDBY LOGFILE GROUP ' || i || ' ''/u02/oradata/PROD_SBY/redo' || i || '.log'' SIZE 200M'
        EXCEPTION WHEN OTHERS THEN
          IF SQLCODE = -1184 THEN NULL; -- Ignore ORA-01184 (group exists)
          ELSE RAISE;
          END IF;
      END LOOP;
    END;
    /
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

  #- name: Add standby redo logs on standby
  # ansible.builtin.shell: |
  # export ORACLE_HOME={{ oracle_home }}
  # export PATH=$ORACLE_HOME/bin:$PATH
  # export ORACLE_SID={{ db_sid }}
  # sqlplus / as sysdba <<EOF
  # ALTER DATABASE ADD STANDBY LOGFILE GROUP 11 '/u02/oradata/PROD_SBY/redo11.log' SIZE 200M;
  # ALTER DATABASE ADD STANDBY LOGFILE GROUP 12 '/u02/oradata/PROD_SBY/redo12.log' SIZE 200M;
  # ALTER DATABASE ADD STANDBY LOGFILE GROUP 13 '/u02/oradata/PROD_SBY/redo13.log' SIZE 200M;
  # ALTER DATABASE ADD STANDBY LOGFILE GROUP 14 '/u02/oradata/PROD_SBY/redo14.log' SIZE 200M;
  # EXIT;
  # EOF
  #become: yes
  #become_user: oracle
  #when: inventory_hostname in groups['standby']

- name: Mount standby database
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    SHUTDOWN IMMEDIATE;
    STARTUP MOUNT;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Start redo apply on standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    ALTER DATABASE RECOVER MANAGED STANDBY DATABASE USING CURRENT LOGFILE DISCONNECT;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']
- name: Verify log apply on standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    SET HEADING OFF
    ALTER DATABASE OPEN READ ONLY;
    SELECT 'APPLIED=' || COUNT(*) FROM V$ARCHIVED_LOG WHERE APPLIED='YES';
    EXIT;
    EOF
  register: log_apply
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Debug log apply status
  ansible.builtin.debug:
    msg: "Standby log apply status: {{ log_apply.stdout }}"
  when: inventory_hostname in groups['standby']

- name: Test data replication
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    CREATE TABLE TEST1 (C1 INT PRIMARY KEY, C2 CHAR(6));
    INSERT INTO TEST1 VALUES (52, 'rap');
    INSERT INTO TEST1 VALUES (56, 'cap');
    COMMIT;
    ALTER SYSTEM CHECKPOINT;
    ALTER SYSTEM SWITCH LOGFILE;
    ALTER SYSTEM ARCHIVE LOG CURRENT;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['primary']

- name: Verify test data on standby
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    SET HEADING OFF
    ALTER DATABASE OPEN READ ONLY;
    SELECT COUNT(*) FROM TEST1 WHERE C1 IN (52, 56);
    EXIT;
    EOF
  register: test_data
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']

- name: Debug test data verification
  ansible.builtin.debug:
    msg: "Test data count on standby: {{ test_data.stdout }}"
  when: inventory_hostname in groups['standby']

- name: Revert standby to MOUNT and restart MRP
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    sqlplus / as sysdba <<EOF
    SHUTDOWN IMMEDIATE;
    STARTUP MOUNT;
    ALTER DATABASE RECOVER MANAGED STANDBY DATABASE USING CURRENT LOGFILE DISCONNECT;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['standby']



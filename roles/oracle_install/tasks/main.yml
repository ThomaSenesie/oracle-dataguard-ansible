
---
# tasks file for /home/oracle/ansible/roles/oracle_install
- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: oracle
    group: oinstall
    mode: '0775'
  loop:
    - /u01/app/oracle
    - /u01/app/oracle/product/19.3.0/dbhome_1
    - /u01/app/oraInventory
    - /u02/oradata
    - /u02/backup/dataguard
    - /u01/app/oracle/admin/{{ db_sid }}/adump
    - /u01/app/oracle/admin/{{ db_sid }}/cdump
  become: yes

- name: Set permissions on Oracle binary
  ansible.builtin.file:
    path: /tmp/LINUX.X64_193000_db_home.zip
    owner: oracle
    group: oinstall
    mode: '0644'
  become: yes

- name: Extract Oracle binaries
  ansible.builtin.unarchive:
    src: /tmp/LINUX.X64_193000_db_home.zip
    dest: "{{ oracle_home }}"
    owner: oracle
    group: oinstall
    remote_src: yes
  become: yes
  become_user: oracle

- name: Copy install response file
  ansible.builtin.template:
    src: install.rsp.j2
    dest: /tmp/install.rsp
    owner: oracle
    group: oinstall
    mode: '0644'

- name: Run Oracle installer
  ansible.builtin.shell: |
    export CV_ASSUME_DISTID=OEL7.8
    {{ oracle_home }}/runInstaller -silent -force -waitforcompletion -ignorePrereqFailure -responseFile /tmp/install.rsp
  become: yes
  become_user: oracle
  register: install_result
  failed_when: "'Successfully Setup Software.' not in install_result.stdout"

- name: Run orainstRoot.sh
  ansible.builtin.shell: "{{ ora_inventory }}/orainstRoot.sh"
  become: yes
  when: "'orainstRoot.sh' in install_result.stdout"

- name: Run root.sh
  ansible.builtin.shell: "{{ oracle_home }}/root.sh -silent"
  become: yes

- name: Copy DBCA response file
  ansible.builtin.template:
    src: dbca.rsp.j2
    dest: /tmp/dbca.rsp
    owner: oracle
    group: oinstall
    mode: '0644'
  when: inventory_hostname in groups['primary']

- name: Create database
  ansible.builtin.shell: |
    {{ oracle_home }}/bin/dbca -silent -createDatabase \
    -responseFile /tmp/dbca.rsp
  become: yes
  become_user: oracle
  register: dbca_result
  failed_when: "'100% complete' not in dbca_result.stdout"
  when: inventory_hostname in groups['primary']

- name: Set database parameters
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    {{ oracle_home }}/bin/sqlplus / as sysdba <<EOF
    ALTER SYSTEM SET processes={{ init_params.processes }} SCOPE=SPFILE;
    SHUTDOWN IMMEDIATE;
    STARTUP;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  register: params_result
  failed_when: params_result.rc != 0
  when: inventory_hostname in groups['primary']

- name: Enable ARCHIVELOG mode
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    {{ oracle_home }}/bin/sqlplus / as sysdba <<EOF
    SHUTDOWN IMMEDIATE;
    STARTUP MOUNT;
    ALTER DATABASE ARCHIVELOG;
    ALTER DATABASE OPEN;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  register: archivelog_result
  failed_when: archivelog_result.rc != 0
  when: inventory_hostname in groups['primary']

- name: Configure Fast Recovery Area
  ansible.builtin.shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    export ORACLE_SID={{ db_sid }}
    {{ oracle_home }}/bin/sqlplus / as sysdba <<EOF
    ALTER SYSTEM SET db_recovery_file_dest='/u02/oradata' SCOPE=BOTH;
    ALTER SYSTEM SET db_recovery_file_dest_size=10G SCOPE=BOTH;
    EXIT;
    EOF
  become: yes
  become_user: oracle
  register: fra_result
  failed_when: fra_result.rc != 0
  when: inventory_hostname in groups['primary']

